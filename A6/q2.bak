#lang rosette/safe
;; You will need only this library for this assignment.
(require rosette/lib/synthax)

(current-bitwidth #f)
;; Do not modify the preamble, especially the current-bitwidth parameter.
;; Your code goes below this line.
;; =============================================================================

;; In this problem, you need to synthesize a function f that satisfies, for each
;; input/output example, f(input) = output.
;; The input/output examples are in the handout, and reminded here:
;; 2 -4 -1  ->  -4
;; 5 3 -10  ->   3
;; 9 -3 4   ->   2
;; 12 -4 2  ->   8
;; 1 -4 7   ->  -2
;; 0 4 1    ->   4
;; -3 3 10  ->   8
;; -10 9 3  ->   9
;; 13 9 0   ->  10
;; Reminder: you are only allowed to use (+, -, min, max) in your function.
;; You can use any integer constant and variables.

;; It will be helpful to define a grammar for expressions:
(define-synthax operators
  ([(operators) (choose max min + -)]))

;; Define a sketch for the function f:
(define (f x y z)
  ((operators)
   ((operators)
    ((operators)(choose x y z (??)) (choose x y z (??)) (choose x y z (??)))
    ((operators)(choose x y z (??)) (choose x y z (??)) (choose x y z (??))))
   ((operators)
    ((operators)(choose x y z (??)) (choose x y z (??)) (choose x y z (??)))
    ((operators)(choose x y z (??)) (choose x y z (??)) (choose x y z (??))))))

;;'(define (f x y z)
;;   (+ (max (+ x x -6) (+ 9 1 y)) (max (+ -4 -11 z) (- x 10 x))))

;; Optional: you can define a specification separate from the synthesis construct.
;; The specification should at least take as argument a function.
(define (spec f) (begin (assert (and (= (f 2 -4 -1) -4)
                                     (= (f 5 3 -10) 3)
                                     (= (f 9 -3 4) 2)
                                     (= (f 12 -4 2) 8)
                                     (= (f 1 -4 7) -2)
                                     (= (f 0 4 1) 4)
                                     (= (f -3 3 10) 8)
                                     (= (f -10 9 3) 9)
                                     (= (f 13 9 0) 10)))))

(define-symbolic x y z integer?)

;; Now, define the synthesis problem that returns a model called "solution".
;; You should use (synthesize ...)
(define solution
  (synthesize #:forall (list x y z)
              #:guarantee (spec f)))
                               

;; =============================================================================
;; Do not modify the code below the line.
;; You should define solution and your function sketch such that
;; (print-forms solution) displays the function definition on the ouput.
(if (sat? solution)
    (print-forms solution)
    (print "UNSAT"))
